@{
    ViewData["Title"] = "Dashboard";
    var user = ViewBag.User as PersonalCloudDrive.Models.ApplicationUser;
    var storageUsedPercentage = ViewBag.StorageUsedPercentage;
}
        <div class="col">
            <h2>@user.Email</h2>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white shadow">
                <div class="card-body">
                    <h5 class="card-title">Total Files</h5>
                    <h2 id="totalFilesCount">@ViewBag.TotalFiles</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white shadow">
                <div class="card-body">
                    <h5 class="card-title">Total Folders</h5>
                    <h2 id="totalFoldersCount">@ViewBag.TotalFolders</h2>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h5 class="card-title">Storage Used</h5>
                    <div class="progress" style="height: 25px;">
                    <div id="storageProgressBar" class="progress-bar bg-info" role="progressbar" 
                        style="width: @(storageUsedPercentage)%;" 
                        aria-valuenow="@storageUsedPercentage" 
                        aria-valuemin="0" 
                        aria-valuemax="100">
                            @string.Format("{0:0.00}%", storageUsedPercentage)
                        </div>
                    </div>
                    <small id="storageText" class="text-muted">
                        @string.Format("{0:0.00} MB", user.StorageUsed / 1024.0 / 1024.0) of 
                        @string.Format("{0:0.00} MB", user.StorageLimit / 1024.0 / 1024.0)
                    </small>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Files -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-white d-flex align-items-center">
                    <h5 class="mb-0">Recent Files</h5>
                    <div class="ms-3">
                        <select id="folderSelect" class="form-select form-select-sm">
                            <option value="">Root</option>
                            @if (ViewBag.Folders != null)
                            {
                                foreach (var f in (List<PersonalCloudDrive.Models.FolderModel>)ViewBag.Folders)
                                {
                                    <option value="@f.FolderId">@f.FolderName</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="ms-3" id="folderList">
                        @if (ViewBag.Folders != null)
                        {
                            foreach (var f in (List<PersonalCloudDrive.Models.FolderModel>)ViewBag.Folders)
                            {
                                <span class="badge bg-light text-dark me-2">@f.FolderName <button class="btn btn-sm btn-danger delete-folder-btn" data-folder-id="@f.FolderId">Delete</button></span>
                            }
                        }
                    </div>
                    <div class="ms-auto d-flex gap-2">
                        <button id="createFolderBtn" class="btn btn-outline-secondary btn-sm">Create Folder</button>
                        <button id="uploadBtn" class="btn btn-primary">Upload Files</button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="fileTableContainer">
                        <!-- File table will be loaded here by JS -->
                    </div>
                    <!-- Hidden upload form (always present) -->
                    <form id="hiddenUploadForm" asp-controller="Dashboard" asp-action="UploadFiles" method="post" enctype="multipart/form-data" style="display:none">
                        @Html.AntiForgeryToken()
                        <input id="fileInput" type="file" name="files" multiple />
                        <input type="hidden" id="parentFolderId" name="parentFolderId" value="" />
                    </form>

@section Scripts {
    <script>
        (function(){
            const uploadBtn = document.getElementById('uploadBtn');
            const fileInput = document.getElementById('fileInput');
            const antiforgeryToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            const folderSelect = document.getElementById('folderSelect');
            const parentFolderInput = document.getElementById('parentFolderId');
            const createFolderBtn = document.getElementById('createFolderBtn');

            uploadBtn?.addEventListener('click', function(e){
                e.preventDefault();
                fileInput?.click();
            });

            fileInput?.addEventListener('change', function(e){
                const files = fileInput.files;
                if (!files || files.length === 0) return;

                const formData = new FormData();
                for (let i = 0; i < files.length; i++) {
                    formData.append('files', files[i]);
                }

                // include selected parent folder if any
                const selectedFolder = folderSelect?.value;
                if (selectedFolder) {
                    formData.append('parentFolderId', selectedFolder);
                }

                // add antiforgery token
                if (antiforgeryToken) formData.append('__RequestVerificationToken', antiforgeryToken);

                fetch('/Dashboard/UploadFiles', {
                    method: 'POST',
                    body: formData
                })
                .then(resp => {
                    if (!resp.ok) throw resp;
                    return resp.json();
                })
                .then(data => {
                    if (data.success) {
                        document.getElementById('totalFilesCount').textContent = data.totalFiles;
                        document.getElementById('totalFoldersCount').textContent = data.totalFolders;
                        const pct = parseFloat(data.storageUsedPercentage) || 0;
                        const progressBar = document.getElementById('storageProgressBar');
                        progressBar.style.width = pct + '%';
                        progressBar.setAttribute('aria-valuenow', pct);
                        progressBar.textContent = pct.toFixed(2) + '%';
                        const usedMB = (data.storageUsed / 1024.0 / 1024.0).toFixed(2);
                        const limitMB = (data.storageLimit / 1024.0 / 1024.0).toFixed(2);
                        document.getElementById('storageText').textContent = usedMB + ' MB of ' + limitMB + ' MB';
                        // optionally reload recent files or the page
                        location.reload();
                    } else {
                        alert('Upload failed');
                    }
                })
                .catch(async err => {
                    try {
                        const json = await err.json();
                        alert('Upload error: ' + (json.message || err.statusText));
                    } catch(e) {
                        alert('Upload error');
                    }
                });
            });

            // Delete file buttons (delegated)
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('delete-file-btn')) {
                    if (!confirm('Are you sure you want to delete this file?')) return;
                    const fileId = e.target.getAttribute('data-file-id');
                    fetch(`/Dashboard/DeleteFile/${fileId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(resp => resp.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Delete failed: ' + (data.message || 'Unknown error'));
                        }
                    })
                    .catch(() => alert('Delete failed'));
                }
            });
            // Delete folder buttons (delegated)
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('delete-folder-btn')) {
                    if (!confirm('Are you sure you want to delete this folder? All files inside will be deleted!')) return;
                    const folderId = e.target.getAttribute('data-folder-id');
                    fetch(`/Dashboard/DeleteFolder/${folderId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(resp => resp.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert('Delete folder failed: ' + (data.message || 'Unknown error'));
                        }
                    })
                    .catch(() => alert('Delete folder failed'));
                }
            });

            // Folder selection persistence and file filtering
            folderSelect?.addEventListener('change', function() {
                if (parentFolderInput) parentFolderInput.value = folderSelect.value || '';
                loadFilesForFolder(folderSelect.value);
            });

            function loadFilesForFolder(folderId) {
                fetch(`/Dashboard/GetFilesForFolder?folderId=${folderId}`)
                    .then(resp => resp.json())
                    .then(data => {
                        const container = document.getElementById('fileTableContainer');
                        if (data.files && data.files.length > 0) {
                            let html = `<div class='table-responsive'><table class='table table-hover'><thead><tr><th>File Name</th><th>Type</th><th>Size</th><th>Uploaded</th><th>Actions</th></tr></thead><tbody>`;
                            for (const file of data.files) {
                                html += `<tr data-file-id='${file.fileId}'>` +
                                    `<td>${file.fileName}</td>` +
                                    `<td><span class='badge bg-secondary'>${file.fileType}</span></td>` +
                                    `<td>${(file.fileSize / 1024.0 / 1024.0).toFixed(2)} MB</td>` +
                                    `<td>${file.uploadedOn}</td>` +
                                    `<td><a class='btn btn-sm btn-outline-primary' href='/Dashboard/DownloadFile/${file.fileId}'>Download</a> ` +
                                    `<button class='btn btn-sm btn-outline-danger delete-file-btn' data-file-id='${file.fileId}'>Delete</button></td>` +
                                    `</tr>`;
                            }
                            html += `</tbody></table></div>`;
                            container.innerHTML = html;
                        } else {
                            container.innerHTML = `<div class='text-center py-4'><i class='bi bi-inbox' style='font-size: 4rem; color: #ccc;'></i><p class='text-muted mt-3'>No files uploaded yet. Start by uploading your first file!</p></div>`;
                        }
                    });
            }

            // Initial load: show files for root (no folder selected)
            loadFilesForFolder("");

            // Create folder flow
            createFolderBtn?.addEventListener('click', function(e) {
                e.preventDefault();
                const name = prompt('Enter new folder name:');
                if (!name) return;
                const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                // Send antiforgery token in header; JSON body contains just the folder name
                fetch('/Dashboard/CreateFolder', {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: { 
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token || ''
                    },
                    body: JSON.stringify({ folderName: name })
                })
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        // reload to refresh folder list
                        location.reload();
                    } else {
                        alert('Create folder failed: ' + (data.message || 'Unknown'));
                    }
                })
                .catch(() => alert('Create folder failed'));
            });
        })();
    </script>
}
                </div>
            </div>
        </div>
    </div>
</div>